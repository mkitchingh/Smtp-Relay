using Microsoft.Extensions.Hosting;using Microsoft.Extensions.Logging;using NetTools;using SmtpServer;using SmtpServer.ComponentModel;using System.Linq;using System.Net;using System.Threading;using System.Threading.Tasks;
namespace SmtpRelay{public class Worker:BackgroundService{private readonly ILogger<Worker>_log;private readonly Config _cfg;public Worker(ILogger<Worker>l){_log=l;_cfg=Config.Load();}protected override async Task ExecuteAsync(CancellationToken stop){_log.LogInformation("Relay to {h}:{p}",_cfg.SmartHost,_cfg.SmartHostPort);var opt=new SmtpServerOptionsBuilder().ServerName("SMTP Relay").Port(25,true).Build();var sp=new ServiceProvider();sp.Add(new MessageRelayStore(_cfg,_log));var srv=new SmtpServer.SmtpServer(opt,sp);if(!_cfg.AllowAllIPs){var allowed=_cfg.AllowedIPs.Select(IPAddressRange.Parse).ToArray();srv.SessionCreated+=(_,e)=>{var ipstr=e.Context.Properties["SessionRemoteAddress"]?.ToString();if(ipstr==null||!IPAddress.TryParse(ipstr,out var ip))return;if(!allowed.Any(r=>r.Contains(ip))){_log.LogWarning("Reject {ip}",ip);}};}await srv.StartAsync(stop);}}}
